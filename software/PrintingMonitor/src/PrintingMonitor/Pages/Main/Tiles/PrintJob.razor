@using PrintingMonitor.Printer
@using PrintingMonitor.Printer.Models.Commands.Informations
@using PrintingMonitor.Printer.Models.Information
@using PrintingMonitor.Printer.Notification

@implements IDisposable

@inject IPrinter Printer

@inject INotificator<Printer.Models.Information.PrintingFileInformation> PrintingFileNotificator
@inject INotificator<Printer.Models.Information.PrintingInformation> PrintingNotificator

<DoubleSideTile AlignContentCenter
                Title="Print Job"
                SizeClasses="col-xl-6 col-md-6 mb-4"
                LeftSideSizeClasses="col-xl-5 col-lg-5 col-12"
                RightSideSizeClasses="col-xl-7 col-lg-7 col-12">
    <LeftSideContent>
        <div class="row mb-2">
            <div class="col">
                <h6 class="text-center">Printer Status:</h6>
            </div>
            <div class="col">
                <h5 class="text-success">@(Printer.IsPrinting ? "Printing" : "Ready")</h5>
            </div>
            @if (Printer.IsPrinting)
            {
                <div class="col-xl-4">
                    <button type="button" class="btn btn-secondary oi oi-x w-100"> Cancel</button>
                </div>
            }
        </div>
        @if (Printer.IsPrinting)
        {
            <div class="row mb-2">
                <div class="progress w-100">
                    <div class="progress-bar bg-secondary progress-bar-striped progress-bar-animated"
                         role="progressbar"
                         aria-valuenow="@(printingInformation?.Current / printingInformation?.Total ?? 0)"
                         aria-valuemin="0"
                         aria-valuemax="100"
                         style="width: @(printingInformation?.Current / printingInformation?.Total ?? 0)%">
                        @(printingInformation?.Current / printingInformation?.Total ?? 0)%
                    </div>
                </div>
            </div>
            <div class="row mb-2">
                <h6>Current Command: @CurrentGCodeCommand</h6>
            </div>
            <div class="row mb-2">
                <h6>Commands: @(printingInformation?.Current) / @(printingInformation?.Total)</h6>
            </div>
        }
    </LeftSideContent>
    <RightSideContent>
        <div class="row mb-2">
            <h6 class="text-center w-100">List of files:</h6>
        </div>
        <div class="row mb-2 ml-1">
            <select class="custom-select" size="5">
                @foreach (var filename in filesInformation?.Filenames ?? Array.Empty<string>())
                {
                    <option value="file">@(filename)</option>
                }
            </select>
        </div>
        <div class="row mb-2">
            <div class="col-xl-8">
                <h6 class="text-center">Select file and start print:</h6>
            </div>
            @if(!Printer.IsPrinting)
            {
                <div class="col-xl-4">
                    <button type="button" class="btn btn-secondary oi oi-check w-100"> Start</button>
                </div>
            }
        </div>
    </RightSideContent>
</DoubleSideTile>

@code
{
    private PrintingFileInformation filesInformation;
    private PrintingInformation printingInformation;

    private string CurrentGCodeCommand { get; } = "-";

    private DateTime PrintingStarTime { get; } = DateTime.Now;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            PrintingNotificator.Subscribed(this, PrintingUpdate);
            PrintingFileNotificator.Subscribed(this, PrintingFileUpdate);

            await Printer.ExecuteInformationCommand(new GetPrintingFiles());
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task PrintingUpdate(PrintingInformation data)
    {
        printingInformation = data;

        await InvokeAsync(this.StateHasChanged);
    }

    private async Task PrintingFileUpdate(PrintingFileInformation data)
    {
        filesInformation = data;

        await InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        PrintingNotificator.Unsubscribed(this);
        PrintingFileNotificator.Unsubscribed(this);
    }

}