@using PrintingMonitor.Printer.Notification

@implements IDisposable

@inject INotificator<Printer.Models.Information.Positions> Notificator;

<DoubleSideTile Title="Positions"
                AlignContentCenter
                SizeClasses="col-xl-3 col-md-6 mb-4"
                LeftSideSizeClasses="col-xl-4 col-lg-4 col-12"
                RightSideSizeClasses="col-xl-8 col-lg-8 col-12">
    <LeftSideContent>
        <div class="row d-flex justify-content-center mb-4">
            <h6>Current X: @(positions?.X.ToString() ?? "-")</h6>
        </div>
        <div class="row d-flex justify-content-center mb-4">
            <h6>Current Y: @(positions?.Y.ToString() ?? "-")</h6>
        </div>
        <div class="row d-flex justify-content-center mb-4">
            <h6>Current Z: @(positions?.Z.ToString() ?? "-")</h6>
        </div>
        <div class="row d-flex justify-content-center">
            <h6>Current E: @(positions?.E.ToString() ?? "-")</h6>
        </div>
    </LeftSideContent>
    <RightSideContent>
        <div class="row  mb-4">
            <div class="col">
                <button type="button" class="btn btn-secondary oi oi-home w-100"> Home X</button>
            </div>
            <div class="col">
                <button type="button" class="btn btn-secondary oi oi-home w-100"> Home X/Y</button>
            </div>
        </div>
        <div class="row  mb-4">
            <div class="col">
                <button type="button" class="btn btn-secondary oi oi-home w-100"> Home Y</button>
            </div>
            <div class="col">
                <button type="button" class="btn btn-secondary oi oi-home w-100"> Home All</button>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <button type="button" class="btn btn-secondary oi oi-home w-100"> Home Z</button>
            </div>
            <div class="col">
                <button type="button" class="btn btn-secondary oi oi-justify-center w-100"> Bed leveling</button>
            </div>
        </div>
    </RightSideContent>
</DoubleSideTile>

@code 
{
    private Printer.Models.Information.Positions positions;
    
    protected override void OnInitialized()
    {
        Notificator.Subscribed(this, PositionsUpdate);
        base.OnInitialized();
    }
    
    private async Task PositionsUpdate(Printer.Models.Information.Positions data)
    {
        positions = data;

        await InvokeAsync(this.StateHasChanged);
    }

    public void Dispose()
    {
        Notificator.Unsubscribed(this);
    }
}